!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!XML	uri	/uri associated with name prefix/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!PlistXML	k,key	/keys/
!_TAG_KIND_DESCRIPTION!XML	i,id	/id attributes/
!_TAG_KIND_DESCRIPTION!XML	n,nsprefix	/namespace prefixes/
!_TAG_KIND_DESCRIPTION!XML	r,root	/root elements/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!PlistXML	0.0	/current.age/
!_TAG_PARSER_VERSION!XML	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/shuang/Documents/GitHub/CodingPractice/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
1. Basic Node Creation and Memory Management	C/linked_lists_problems.md	/^# 1. Basic Node Creation and Memory Management$/;"	c
2. Simple Linked List Operations	C/linked_lists_problems.md	/^# 2. Simple Linked List Operations$/;"	c
3. Insert at Position	C/linked_lists_problems.md	/^# 3. Insert at Position$/;"	c
4. List Manipulation	C/linked_lists_problems.md	/^# 4. List Manipulation$/;"	c
5. Circular List with Tail	C/linked_lists_problems.md	/^# 5. Circular List with Tail$/;"	c
CFBundleDevelopmentRegion	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleIdentifier	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleInfoDictionaryVersion	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundlePackageType	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundlePackageType<\/key>$/;"	k
CFBundleShortVersionString	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleSignature	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundleSignature<\/key>$/;"	k
CFBundleVersion	C/llist.dSYM/Contents/Info.plist	/^		<key>CFBundleVersion<\/key>$/;"	k
CodingPractice	README.md	/^# CodingPractice/;"	c
Pointers in C: Core Concepts	C/pointers_problems.md	/^# Pointers in C: Core Concepts$/;"	c
Practice Problems	C/pointers_problems.md	/^# Practice Problems$/;"	c
arraySum_a	C/pointers_answers.c	/^int arraySum_a(int *arr, int size) {$/;"	f	typeref:typename:int
arraySum_b	C/pointers_answers.c	/^int arraySum_b(int *arr, int size) {$/;"	f	typeref:typename:int
arraySum_c	C/pointers_answers.c	/^int arraySum_c(int *arr, int size) {$/;"	f	typeref:typename:int
circular_list	C/linked_lists_answers.c	/^typedef struct circular_list {$/;"	s	file:
circular_list_t	C/linked_lists_answers.c	/^} circular_list_t;$/;"	t	typeref:struct:circular_list	file:
create_circular_list	C/linked_lists_answers.c	/^circular_list_t *create_circular_list() {$/;"	f	typeref:typename:circular_list_t *
create_list	C/linked_lists_answers.c	/^list_t *create_list() {$/;"	f	typeref:typename:list_t *
create_node	C/linked_lists_answers.c	/^node_t *create_node(int data) {$/;"	f	typeref:typename:node_t *
create_reversed_copy	C/linked_lists_answers.c	/^list_t *create_reversed_copy(list_t *list) {  $/;"	f	typeref:typename:list_t *
data	C/linked_lists_answers.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
delete_front	C/linked_lists_answers.c	/^void delete_front(circular_list_t *list) {$/;"	f	typeref:typename:void
findMiddle	C/pointers_answers.c	/^int findMiddle(int *arr, int size) {$/;"	f	typeref:typename:int
free_circular_list	C/linked_lists_answers.c	/^void free_circular_list(circular_list_t *list) {$/;"	f	typeref:typename:void
free_list	C/linked_lists_answers.c	/^void free_list(list_t *list) {$/;"	f	typeref:typename:void
free_node	C/linked_lists_answers.c	/^void free_node(node_t *node) {$/;"	f	typeref:typename:void
head	C/linked_lists_answers.c	/^    node_t *head;$/;"	m	struct:circular_list	typeref:typename:node_t *	file:
head	C/linked_lists_answers.c	/^    node_t *head;$/;"	m	struct:list	typeref:typename:node_t *	file:
insert_at_position	C/linked_lists_answers.c	/^int insert_at_position(list_t *list, int data, int position)  {$/;"	f	typeref:typename:int
insert_end	C/linked_lists_answers.c	/^void insert_end(circular_list_t *list, int data) {$/;"	f	typeref:typename:void
insert_front	C/linked_lists_answers.c	/^void insert_front(list_t *list, int data) {$/;"	f	typeref:typename:void
insert_sorted	C/linked_lists_answers.c	/^void insert_sorted(list_t *list, int data) {$/;"	f	typeref:typename:void
list	C/linked_lists_answers.c	/^typedef struct list {$/;"	s	file:
list_t	C/linked_lists_answers.c	/^} list_t;$/;"	t	typeref:struct:list	file:
main	C/linked_lists_answers.c	/^int main() {$/;"	f	typeref:typename:int
myStrlen	C/pointers_answers.c	/^int myStrlen(char *str) {$/;"	f	typeref:typename:int
myStrlen_a	C/pointers_answers.c	/^int myStrlen_a(char *str) {$/;"	f	typeref:typename:int
next	C/linked_lists_answers.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
node	C/linked_lists_answers.c	/^typedef struct node {$/;"	s	file:
node_t	C/linked_lists_answers.c	/^} node_t;$/;"	t	typeref:struct:node	file:
print_list	C/linked_lists_answers.c	/^void print_list(list_t *list) {$/;"	f	typeref:typename:void
reverseArray_a	C/pointers_answers.c	/^void reverseArray_a(int *arr, int size) {$/;"	f	typeref:typename:void
rowSums_a	C/pointers_answers.c	/^int* rowSums_a(int **matrix, int n, int m) {$/;"	f	typeref:typename:int *
rowSums_b	C/pointers_answers.c	/^int* rowSums_b(int **matrix, int n, int m) {$/;"	f	typeref:typename:int *
size	C/linked_lists_answers.c	/^    int size;$/;"	m	struct:circular_list	typeref:typename:int	file:
size	C/linked_lists_answers.c	/^    int size;$/;"	m	struct:list	typeref:typename:int	file:
swap	C/pointers_answers.c	/^void swap(int *a, int *b) {$/;"	f	typeref:typename:void
tail	C/linked_lists_answers.c	/^    node_t *tail;$/;"	m	struct:circular_list	typeref:typename:node_t *	file:
